import me.champeau.jmh.JmhBytecodeGeneratorTask
import org.gradle.internal.os.OperatingSystem
import org.ajoberstar.grgit.Grgit

plugins {
    id 'java'
    id 'scala'
    id 'me.champeau.jmh' version '0.7.1'
    id 'org.ajoberstar.grgit' version '5.2.0'
}

group = 'org.simdjson'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

ext {
    junitVersion = '5.9.1'
}

dependencies {
    jmhImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
    jmhImplementation group: 'com.alibaba.fastjson2', name: 'fastjson2', version: '2.0.35'
    jmhImplementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
    jmhImplementation group: 'com.github.plokhotnyuk.jsoniter-scala', name: 'jsoniter-scala-core_2.13', version: '2.23.2'
    compileOnly group: 'com.github.plokhotnyuk.jsoniter-scala', name: 'jsoniter-scala-macros_2.13', version: '2.23.2'

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

tasks.register('downloadTestData') {
    doFirst {
        def testDataDir = new File("${project.projectDir.getAbsolutePath()}/testdata")
        if (!testDataDir.exists()) {
            testDataDir.mkdir()
        }
        def numbersTestDataDir = new File("${testDataDir}/parse-number-fxx-test-data")
        if (!numbersTestDataDir.exists()) {
            def grgit = Grgit.clone(dir: numbersTestDataDir, uri: 'https://github.com/nigeltao/parse-number-fxx-test-data.git')
            grgit.close()
        }
    }
}

test {
    dependsOn downloadTestData
    useJUnitPlatform()
    jvmArgs += [
            '--add-modules', 'jdk.incubator.vector',
            '-Xmx2g'
    ]
}

tasks.withType(JmhBytecodeGeneratorTask).configureEach {
    jvmArgs.set(["--add-modules=jdk.incubator.vector"])
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--add-modules=jdk.incubator.vector")
}

tasks.compileJmhScala.classpath = sourceSets.main.compileClasspath

tasks.compileJmhJava.classpath += files(sourceSets.jmh.scala.classesDirectory)

compileTestJava {
    options.compilerArgs += [
            '--add-modules', 'jdk.incubator.vector'
    ]
}

jmh {
    fork = 1
    warmupIterations = 3
    iterations = 5
    jvmArgsPrepend = [
            '--add-modules=jdk.incubator.vector'
    ]
    if (getBooleanProperty('jmh.profilersEnabled', false)) {
        if (OperatingSystem.current().isLinux()) {
            profilers = [
                    'perf',
                    'perfasm:intelSyntax=true',
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('LD_LIBRARY_PATH')
            ]
        } else if (OperatingSystem.current().isMacOsX()) {
            profilers = [
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('DYLD_LIBRARY_PATH')
            ]
        }
    }
    if (project.hasProperty('jmh.includes')) {
        includes = [project.findProperty('jmh.includes')]
    }
}

def getBooleanProperty(String name, boolean defaultValue) {
    Boolean.valueOf((project.findProperty(name) ?: defaultValue) as String)
}

static def getAsyncProfilerLibPath(String envVarName) {
    System.getenv(envVarName) ?: System.getProperty('java.library.path')
}
